{
  "CodeCommit Events Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "CodeStarConnectionsPermissions",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:CreateConnection",
          "codestar-connections:GetConnection",
          "codestar-connections:ListConnections",
          "codestar-connections:UpdateConnection",
          "codestar-connections:DeleteConnection",
          "codestar-connections:UseConnection",
          "codestar-connections:PassConnection",
          "codestar-connections:TagResource",
          "codestar-connections:UntagResource",
          "codestar-connections:ListTagsForResource"
        ],
        "Resource": "*"
      },
      {
        "Sid": "CodeCommitPermissions",
        "Effect": "Allow",
        "Action": [
          "codecommit:CreateRepository",
          "codecommit:GetRepository",
          "codecommit:UpdateRepositoryName",
          "codecommit:UpdateRepositoryDescription",
          "codecommit:DeleteRepository",
          "codecommit:ListRepositories",
          "codecommit:GitPull",
          "codecommit:GitPush",
          "codecommit:CreateBranch",
          "codecommit:DeleteBranch",
          "codecommit:GetBranch",
          "codecommit:ListBranches",
          "codecommit:CreateCommit",
          "codecommit:GetCommit",
          "codecommit:BatchGetCommits",
          "codecommit:TagResource",
          "codecommit:UntagResource",
          "codecommit:ListTagsForResource"
        ],
        "Resource": "*"
      },
      {
        "Sid": "CodeArtifactPermissions",
        "Effect": "Allow",
        "Action": [
          "codeartifact:CreateRepository",
          "codeartifact:GetRepository",
          "codeartifact:UpdateRepository",
          "codeartifact:DeleteRepository",
          "codeartifact:ListRepositories",
          "codeartifact:CreateDomain",
          "codeartifact:GetDomain",
          "codeartifact:UpdateDomain",
          "codeartifact:DeleteDomain",
          "codeartifact:ListDomains",
          "codeartifact:GetAuthorizationToken",
          "codeartifact:ReadFromRepository",
          "codeartifact:PublishPackageVersion",
          "codeartifact:DeletePackageVersions",
          "codeartifact:TagResource",
          "codeartifact:UntagResource",
          "codeartifact:ListTagsForResource"
        ],
        "Resource": "*"
      },
      {
        "Sid": "CodeBuildPermissions",
        "Effect": "Allow",
        "Action": [
          "codebuild:CreateProject",
          "codebuild:BatchGetProjects",
          "codebuild:UpdateProject",
          "codebuild:DeleteProject",
          "codebuild:ListProjects",
          "codebuild:StartBuild",
          "codebuild:StopBuild",
          "codebuild:BatchGetBuilds",
          "codebuild:ListBuildsForProject",
          "codebuild:CreateReportGroup",
          "codebuild:UpdateReportGroup",
          "codebuild:DeleteReportGroup",
          "codebuild:ListReportGroups",
          "codebuild:BatchGetReportGroups"
        ],
        "Resource": "*"
      },
      {
        "Sid": "CodeDeployPermissions",
        "Effect": "Allow",
        "Action": [
          "codedeploy:CreateApplication",
          "codedeploy:GetApplication",
          "codedeploy:UpdateApplication",
          "codedeploy:DeleteApplication",
          "codedeploy:ListApplications",
          "codedeploy:CreateDeployment",
          "codedeploy:GetDeployment",
          "codedeploy:StopDeployment",
          "codedeploy:ListDeployments",
          "codedeploy:CreateDeploymentGroup",
          "codedeploy:GetDeploymentGroup",
          "codedeploy:UpdateDeploymentGroup",
          "codedeploy:DeleteDeploymentGroup",
          "codedeploy:ListDeploymentGroups",
          "codedeploy:CreateDeploymentConfig",
          "codedeploy:GetDeploymentConfig",
          "codedeploy:DeleteDeploymentConfig",
          "codedeploy:ListDeploymentConfigs"
        ],
        "Resource": "*"
      },
      {
        "Sid": "CodePipelinePermissions",
        "Effect": "Allow",
        "Action": [
          "codepipeline:CreatePipeline",
          "codepipeline:GetPipeline",
          "codepipeline:UpdatePipeline",
          "codepipeline:DeletePipeline",
          "codepipeline:ListPipelines",
          "codepipeline:StartPipelineExecution",
          "codepipeline:StopPipelineExecution",
          "codepipeline:GetPipelineExecution",
          "codepipeline:ListPipelineExecutions",
          "codepipeline:GetPipelineState",
          "codepipeline:EnableStageTransition",
          "codepipeline:DisableStageTransition",
          "codepipeline:TagResource",
          "codepipeline:UntagResource",
          "codepipeline:ListTagsForResource"
        ],
        "Resource": "*"
      },
      {
        "Sid": "CodeConnectionsPermissions",
        "Effect": "Allow",
        "Action": [
          "codeconnections:CreateConnection",
          "codeconnections:GetConnection",
          "codeconnections:UpdateConnection",
          "codeconnections:DeleteConnection",
          "codeconnections:ListConnections",
          "codeconnections:UseConnection",
          "codeconnections:StartOAuthHandshake",
          "codeconnections:GetIndividualAccessToken",
          "codeconnections:ListInstallationTargets",
          "codeconnections:GetInstallationUrl",
          "codeconnections:UpdateConnectionInstallation",
          "codeconnections:CreateHost",
          "codeconnections:GetHost",
          "codeconnections:UpdateHost",
          "codeconnections:DeleteHost",
          "codeconnections:ListHosts",
          "codeconnections:TagResource",
          "codeconnections:UntagResource",
          "codeconnections:ListTagsForResource"
        ],
        "Resource": "*"
      },
      {
        "Sid": "EventBridgeEnhancedAccess",
        "Effect": "Allow",
        "Action": [
          "events:ListEndpoints",
          "events:ListEventBuses",
          "events:ListRules",
          "events:ListConnections",
          "events:ListEventSources",
          "events:ListTargetsByRule",
          "events:ListRuleNamesByTarget",
          "events:ListArchives",
          "events:ListReplays",
          "events:ListPartnerEventSources",
          "events:ListPartnerEventSourceAccounts",
          "events:ListTagsForResource",
          "events:DescribeEndpoint",
          "events:DescribeEventBus",
          "events:DescribeConnection",
          "events:DescribeEventSource",
          "events:DescribeRule",
          "events:DescribeArchive",
          "events:DescribeReplay",
          "events:DescribePartnerEventSource",
          "events:TestEventPattern",
          "events:CreateEventBus",
          "events:CreateConnection",
          "events:CreateEndpoint",
          "events:CreateArchive",
          "events:CreatePartnerEventSource",
          "events:PutRule",
          "events:PutTargets",
          "events:PutEvents",
          "events:PutPermission",
          "events:PutPartnerEvents",
          "events:UpdateEndpoint",
          "events:UpdateEventBus",
          "events:UpdateConnection",
          "events:UpdateArchive",
          "events:EnableRule",
          "events:DisableRule",
          "events:DeleteEventBus",
          "events:DeleteConnection",
          "events:DeleteEndpoint",
          "events:DeleteRule",
          "events:DeleteArchive",
          "events:DeletePartnerEventSource",
          "events:RemoveTargets",
          "events:RemovePermission",
          "events:StartReplay",
          "events:CancelReplay",
          "events:ActivateEventSource",
          "events:DeactivateEventSource",
          "events:TagResource",
          "events:UntagResource"
        ],
        "Resource": "*"
      }
    ]
  },
  "API Gateway Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "RestApiFullAccess",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "apigateway:POST",
          "apigateway:PUT",
          "apigateway:DELETE",
          "apigateway:PATCH"
        ],
        "Resource": [
          "arn:aws:apigateway:us-east-1::/restapis",
          "arn:aws:apigateway:us-east-1::/restapis/*"
        ]
      },
      {
        "Sid": "HttpApiDynamicAccess",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "apigateway:POST",
          "apigateway:PUT",
          "apigateway:DELETE",
          "apigateway:PATCH"
        ],
        "Resource": [
          "arn:aws:apigateway:us-east-1::/apis",
          "arn:aws:apigateway:us-east-1::/apis/*"
        ]
      },
      {
        "Sid": "CloudWatchLogsAccess",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": "arn:aws:logs:us-east-1:729633240479:*"
      }
    ]
  },
  "Athena Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "AthenaQueryCRUD",
        "Effect": "Allow",
        "Action": [
          "athena:StartQueryExecution",
          "athena:StopQueryExecution",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:GetQueryResultsStream"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AthenaWorkGroupCRUD",
        "Effect": "Allow",
        "Action": [
          "athena:CreateWorkGroup",
          "athena:GetWorkGroup",
          "athena:ListWorkGroups",
          "athena:UpdateWorkGroup",
          "athena:DeleteWorkGroup"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AthenaNamedQueryCRUD",
        "Effect": "Allow",
        "Action": [
          "athena:CreateNamedQuery",
          "athena:GetNamedQuery",
          "athena:ListNamedQueries",
          "athena:DeleteNamedQuery"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AthenaPreparedStatementCRUD",
        "Effect": "Allow",
        "Action": [
          "athena:CreatePreparedStatement",
          "athena:GetPreparedStatement",
          "athena:ListPreparedStatements",
          "athena:UpdatePreparedStatement",
          "athena:DeletePreparedStatement"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AthenaEngineCapacityRead",
        "Effect": "Allow",
        "Action": [
          "athena:GetEngineVersion",
          "athena:ListEngineVersions",
          "athena:ListCapacityReservations",
          "athena:GetCapacityReservation"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AthenaTaggingCRUD",
        "Effect": "Allow",
        "Action": [
          "athena:TagResource",
          "athena:UntagResource",
          "athena:ListTagsForResource"
        ],
        "Resource": "*"
      },
      {
        "Sid": "GlueCatalogRead",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:SearchTables"
        ],
        "Resource": "*"
      },
      {
        "Sid": "LakeFormationQueryAccess",
        "Effect": "Allow",
        "Action": [
          "lakeformation:GetDataAccess"
        ],
        "Resource": "*"
      }
    ]
  },
  "CFN Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "CloudFormationFullWithGetTemplateSummary",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:UpdateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStacks",
          "cloudformation:GetTemplate",
          "cloudformation:GetTemplateSummary",
          "cloudformation:ValidateTemplate",
          "cloudformation:ListStackResources",
          "cloudformation:ListStacks",
          "cloudformation:DescribeStackEvents",
          "cloudformation:GetStackPolicy",
          "cloudformation:SetStackPolicy",
          "cloudformation:TagResource",
          "cloudformation:UntagResource",
          "cloudformation:CreateUploadBucket"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AllowCloudFormationTransformChangeSet",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet"
        ],
        "Resource": "arn:aws:cloudformation:us-east-1:aws:transform/LanguageExtensions"
      },
      {
        "Sid": "AllowAthenaWorkgroupAccess",
        "Effect": "Allow",
        "Action": [
          "athena:GetWorkGroup",
          "athena:ListWorkGroups"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AllowEventBridgeSchedulerAccess",
        "Effect": "Allow",
        "Action": [
          "scheduler:GetScheduleGroup",
          "scheduler:ListScheduleGroups"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AllowAccessAnalyzerValidation",
        "Effect": "Allow",
        "Action": "access-analyzer:ValidatePolicy",
        "Resource": "*"
      }
    ]
  },
  "Datazone Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "DomainManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateDomain",
          "datazone:GetDomain",
          "datazone:ListDomains",
          "datazone:UpdateDomain",
          "datazone:DeleteDomain",
          "datazone:GetDomainUnit"
        ],
        "Resource": "*"
      },
      {
        "Sid": "ProjectManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateProject",
          "datazone:CreateProjectProfile",
          "datazone:GetProject",
          "datazone:GetProjectProfile",
          "datazone:UpdateProjectProfile",
          "datazone:ListProjects",
          "datazone:ListProjectProfiles",
          "datazone:UpdateProject",
          "datazone:DeleteProject"
        ],
        "Resource": "*"
      },
      {
        "Sid": "EnvironmentManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateEnvironment",
          "datazone:GetEnvironment",
          "datazone:ListEnvironments",
          "datazone:UpdateEnvironment",
          "datazone:DeleteEnvironment"
        ],
        "Resource": "*"
      },
      {
        "Sid": "EnvironmentProfileAndBlueprints",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateEnvironmentProfile",
          "datazone:GetEnvironmentProfile",
          "datazone:ListEnvironmentProfiles",
          "datazone:UpdateEnvironmentProfile",
          "datazone:DeleteEnvironmentProfile",
          "datazone:GetEnvironmentBlueprint",
          "datazone:ListEnvironmentBlueprints",
          "datazone:ListEnvironmentBlueprintConfigurations",
          "datazone:PutEnvironmentBlueprintConfiguration"
        ],
        "Resource": "*"
      },
      {
        "Sid": "AssetManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateAsset",
          "datazone:GetAsset",
          "datazone:DeleteAsset",
          "datazone:CreateAssetType",
          "datazone:GetAssetType",
          "datazone:DeleteAssetType",
          "datazone:ListAssetFilters"
        ],
        "Resource": "*"
      },
      {
        "Sid": "DataSourceManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateDataSource",
          "datazone:GetDataSource",
          "datazone:ListDataSources",
          "datazone:UpdateDataSource",
          "datazone:DeleteDataSource",
          "datazone:StartDataSourceRun",
          "datazone:GetDataSourceRun",
          "datazone:ListDataSourceRuns"
        ],
        "Resource": "*"
      },
      {
        "Sid": "GlossaryManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateGlossary",
          "datazone:GetGlossary",
          "datazone:UpdateGlossary",
          "datazone:DeleteGlossary",
          "datazone:CreateGlossaryTerm",
          "datazone:GetGlossaryTerm",
          "datazone:UpdateGlossaryTerm",
          "datazone:DeleteGlossaryTerm"
        ],
        "Resource": "*"
      },
      {
        "Sid": "FormTypeManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateFormType",
          "datazone:GetFormType",
          "datazone:DeleteFormType"
        ],
        "Resource": "*"
      },
      {
        "Sid": "UserAndGroupProfiles",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateUserProfile",
          "datazone:GetUserProfile",
          "datazone:UpdateUserProfile",
          "datazone:CreateGroupProfile",
          "datazone:GetGroupProfile",
          "datazone:UpdateGroupProfile"
        ],
        "Resource": "*"
      },
      {
        "Sid": "SearchCapabilities",
        "Effect": "Allow",
        "Action": [
          "datazone:SearchTypes",
          "datazone:SearchListings",
          "datazone:SearchUserProfiles",
          "datazone:SearchGroupProfiles"
        ],
        "Resource": "*"
      },
      {
        "Sid": "SubscriptionRequests",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateSubscriptionRequest",
          "datazone:GetSubscriptionRequestDetails",
          "datazone:ListSubscriptionRequests",
          "datazone:UpdateSubscriptionRequest",
          "datazone:DeleteSubscriptionRequest",
          "datazone:AcceptSubscriptionRequest",
          "datazone:RejectSubscriptionRequest",
          "datazone:CancelSubscription"
        ],
        "Resource": "*"
      },
      {
        "Sid": "SubscriptionGrants",
        "Effect": "Allow",
        "Action": [
          "datazone:CreateSubscriptionGrant",
          "datazone:DeleteSubscriptionGrant"
        ],
        "Resource": "*"
      },
      {
        "Sid": "PolicyGrantManagement",
        "Effect": "Allow",
        "Action": [
          "datazone:ListPolicyGrants"
        ],
        "Resource": "*"
      },
      {
        "Sid": "OwnershipAndIAMPermissions",
        "Effect": "Allow",
        "Action": [
          "datazone:ListEntityOwners",
          "datazone:AddEntityOwner",
          "datazone:AddPolicyGrant",
          "datazone:GetIamPortalLoginUrl"
        ],
        "Resource": "*"
      },
      {
        "Sid": "TaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "datazone:TagResource",
          "datazone:UntagResource",
          "datazone:ListTagsForResource"
        ],
        "Resource": "*"
      },
      {
        "Sid": "SSOAndIdentityPermissions",
        "Effect": "Allow",
        "Action": [
          "sso:ListInstances",
          "sso:DescribeInstance",
          "sso:ListPermissionSets",
          "sso:DescribePermissionSet",
          "sso:ListAccountAssignments",
          "sso:GetPermissionsPolicy",
          "identitystore:ListUsers",
          "identitystore:ListGroups",
          "identitystore:DescribeUser",
          "identitystore:DescribeGroup"
        ],
        "Resource": "*"
      },
      {
        "Sid": "RAMPermissions",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShareAssociations"
        ],
        "Resource": "*"
      },
      {
        "Sid": "IAMListPermissions",
        "Effect": "Allow",
        "Action": [
          "iam:GetUser",
          "iam:ListUsers",
          "iam:GetRole",
          "iam:ListRoles",
          "iam:GetUserPolicy",
          "iam:GetRolePolicy",
          "iam:ListAttachedUserPolicies",
          "iam:ListAttachedRolePolicies",
          "iam:SimulatePrincipalPolicy",
          "iam:ListGroups",
          "iam:GetGroup",
          "iam:ListAttachedGroupPolicies",
          "iam:GetGroupPolicy"
        ],
        "Resource": "*"
      },
      {
        "Sid": "IAMCreatePolicyForBlueprints",
        "Effect": "Allow",
        "Action": [
          "iam:CreatePolicy"
        ],
        "Resource": "*"
      }
    ]
  },
  "DMS Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "DMSFullAdminAccess",
        "Effect": "Allow",
        "Action": [
          "dms:CreateEndpoint",
          "dms:DescribeEndpoints",
          "dms:ModifyEndpoint",
          "dms:DeleteEndpoint",
          "dms:TestConnection",
          "dms:CreateReplicationTask",
          "dms:DescribeReplicationTasks",
          "dms:ModifyReplicationTask",
          "dms:DeleteReplicationTask",
          "dms:StartReplicationTask",
          "dms:StopReplicationTask",
          "dms:StartReplicationTaskAssessment",
          "dms:StartReplicationTaskAssessmentRun",
          "dms:DescribeReplicationTaskAssessmentResults",
          "dms:DescribeTableStatistics",
          "dms:CreateReplicationInstance",
          "dms:DescribeReplicationInstances",
          "dms:ModifyReplicationInstance",
          "dms:DeleteReplicationInstance",
          "dms:RebootReplicationInstance",
          "dms:CreateReplicationSubnetGroup",
          "dms:DescribeReplicationSubnetGroups",
          "dms:ModifyReplicationSubnetGroup",
          "dms:DeleteReplicationSubnetGroup",
          "dms:CreateEventSubscription",
          "dms:DescribeEventSubscriptions",
          "dms:ModifyEventSubscription",
          "dms:DeleteEventSubscription",
          "dms:DescribeEventCategories",
          "dms:ImportCertificate",
          "dms:DescribeCertificates",
          "dms:DeleteCertificate",
          "dms:DescribeConnections",
          "dms:DeleteConnection",
          "dms:RefreshSchemas",
          "dms:DescribeSchemas",
          "dms:DescribeRefreshSchemasStatus",
          "dms:AddTagsToResource",
          "dms:RemoveTagsFromResource",
          "dms:ListTagsForResource",
          "dms:DescribeAccountAttributes",
          "dms:DescribeEndpointTypes",
          "dms:DescribeEndpointSettings",
          "dms:DescribeOrderableReplicationInstances",
          "dms:DescribePendingMaintenanceActions"
        ],
        "Resource": "*"
      }
    ]
  },
  "EC2 Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "EC2AdminPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:RebootInstances",
          "ec2:TerminateInstances",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot",
          "ec2:MonitorInstances",
          "ec2:UnmonitorInstances",
          "ec2:AllocateAddress",
          "ec2:ReleaseAddress",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeAddresses",
          "ec2:CreateVolume",
          "ec2:DeleteVolume",
          "ec2:AttachVolume",
          "ec2:DetachVolume",
          "ec2:DescribeVolumes",
          "ec2:ModifyVolume",
          "ec2:DescribeVolumeStatus",
          "ec2:DescribeVolumeAttribute",
          "ec2:ModifyVolumeAttribute",
          "ec2:EnableVolumeIO",
          "ec2:CreateSnapshot",
          "ec2:DeleteSnapshot",
          "ec2:DescribeSnapshots",
          "ec2:CopySnapshot",
          "ec2:ModifySnapshotAttribute",
          "ec2:ResetSnapshotAttribute",
          "ec2:CreateImage",
          "ec2:DescribeImages",
          "ec2:DeregisterImage",
          "ec2:CopyImage",
          "ec2:ModifyImageAttribute",
          "ec2:ResetImageAttribute",
          "ec2:EnableImageDeprecation",
          "ec2:DisableImageDeprecation",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeSecurityGroups",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:DescribeSecurityGroupRules",
          "ec2:ModifySecurityGroupRules",
          "ec2:CreateKeyPair",
          "ec2:DeleteKeyPair",
          "ec2:DescribeKeyPairs",
          "ec2:ImportKeyPair",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:AttachNetworkInterface",
          "ec2:DetachNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ResetNetworkInterfaceAttribute",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:ModifyLaunchTemplate",
          "ec2:GetLaunchTemplateData",
          "ec2:CreatePlacementGroup",
          "ec2:DeletePlacementGroup",
          "ec2:DescribePlacementGroups",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:DescribeTags",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeRegions"
        ],
        "Resource": "*"
      }
    ]
  },
  "Glue Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "GlueFullAccessWithAllManagement",
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:DeleteDatabase",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:UpdateDatabase",
          "glue:CreateTable",
          "glue:DeleteTable",
          "glue:GetTable",
          "glue:GetTables",
          "glue:UpdateTable",
          "glue:BatchDeleteTable",
          "glue:GetTableVersion",
          "glue:GetTableVersions",
          "glue:DeleteTableVersion",
          "glue:CreatePartition",
          "glue:DeletePartition",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:UpdatePartition",
          "glue:BatchCreatePartition",
          "glue:BatchDeletePartition",
          "glue:BatchUpdatePartition",
          "glue:GetPartitionIndexes",
          "glue:CreatePartitionIndex",
          "glue:DeletePartitionIndex",
          "glue:CreateJob",
          "glue:DeleteJob",
          "glue:GetJob",
          "glue:GetJobs",
          "glue:UpdateJob",
          "glue:StartJobRun",
          "glue:BatchStopJobRun",
          "glue:GetJobRun",
          "glue:GetJobRuns",
          "glue:GetJobBookmark",
          "glue:ResetJobBookmark",
          "glue:CreateCrawler",
          "glue:DeleteCrawler",
          "glue:GetCrawler",
          "glue:GetCrawlers",
          "glue:UpdateCrawler",
          "glue:StartCrawler",
          "glue:StopCrawler",
          "glue:GetCrawlerMetrics",
          "glue:CreateConnection",
          "glue:DeleteConnection",
          "glue:GetConnection",
          "glue:GetConnections",
          "glue:UpdateConnection",
          "glue:BatchDeleteConnection",
          "glue:CreateClassifier",
          "glue:DeleteClassifier",
          "glue:GetClassifier",
          "glue:GetClassifiers",
          "glue:UpdateClassifier",
          "glue:CreateTrigger",
          "glue:DeleteTrigger",
          "glue:GetTrigger",
          "glue:GetTriggers",
          "glue:UpdateTrigger",
          "glue:StartTrigger",
          "glue:StopTrigger",
          "glue:CreateWorkflow",
          "glue:DeleteWorkflow",
          "glue:GetWorkflow",
          "glue:ListWorkflows",
          "glue:UpdateWorkflow",
          "glue:StartWorkflowRun",
          "glue:StopWorkflowRun",
          "glue:GetWorkflowRun",
          "glue:GetWorkflowRuns",
          "glue:GetWorkflowRunProperties",
          "glue:PutWorkflowRunProperties",
          "glue:CreateDevEndpoint",
          "glue:DeleteDevEndpoint",
          "glue:GetDevEndpoint",
          "glue:GetDevEndpoints",
          "glue:UpdateDevEndpoint",
          "glue:CreateMLTransform",
          "glue:DeleteMLTransform",
          "glue:GetMLTransform",
          "glue:GetMLTransforms",
          "glue:UpdateMLTransform",
          "glue:StartMLEvaluationTaskRun",
          "glue:StartMLLabelingSetGenerationTaskRun",
          "glue:GetMLTaskRun",
          "glue:GetMLTaskRuns",
          "glue:CancelMLTaskRun",
          "glue:CreateSecurityConfiguration",
          "glue:DeleteSecurityConfiguration",
          "glue:GetSecurityConfiguration",
          "glue:GetSecurityConfigurations",
          "glue:CreateRegistry",
          "glue:DeleteRegistry",
          "glue:GetRegistry",
          "glue:ListRegistries",
          "glue:UpdateRegistry",
          "glue:CreateSchema",
          "glue:DeleteSchema",
          "glue:GetSchema",
          "glue:ListSchemas",
          "glue:UpdateSchema",
          "glue:RegisterSchemaVersion",
          "glue:DeleteSchemaVersions",
          "glue:GetSchemaVersion",
          "glue:ListSchemaVersions",
          "glue:CheckSchemaVersionValidity",
          "glue:GetDataCatalogEncryptionSettings",
          "glue:PutDataCatalogEncryptionSettings",
          "glue:GetResourcePolicy",
          "glue:PutResourcePolicy",
          "glue:DeleteResourcePolicy",
          "glue:TagResource",
          "glue:UntagResource",
          "glue:GetTags",
          "glue:SearchTables"
        ],
        "Resource": "*"
      }
    ]
  },
  "IAM Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "IAMDeveloperPermissions",
        "Effect": "Allow",
        "Action": [
          "iam:GetAccountSummary",
          "iam:ListAccountAliases",
          "iam:CreateRole",
          "iam:DeleteRole",
          "iam:GetRole",
          "iam:ListRoles",
          "iam:UpdateRole",
          "iam:PassRole",
          "iam:AttachRolePolicy",
          "iam:DetachRolePolicy",
          "iam:ListAttachedRolePolicies",
          "iam:GetRolePolicy",
          "iam:PutRolePolicy",
          "iam:DeleteRolePolicy",
          "iam:ListRolePolicies",
          "iam:TagRole",
          "iam:UntagRole",
          "iam:ListRoleTags",
          "iam:GetPolicy",
          "iam:ListPolicies",
          "iam:ListPolicyVersions",
          "iam:GetPolicyVersion",
          "iam:GetUser",
          "iam:ListUsers",
          "iam:TagUser",
          "iam:UntagUser",
          "iam:ListUserTags",
          "iam:AttachUserPolicy",
          "iam:DetachUserPolicy",
          "iam:GetUserPolicy",
          "iam:PutUserPolicy",
          "iam:DeleteUserPolicy",
          "iam:ListUserPolicies",
          "iam:ListAttachedUserPolicies",
          "iam:GetGroup",
          "iam:ListGroups",
          "iam:AddUserToGroup",
          "iam:RemoveUserFromGroup",
          "iam:ListGroupsForUser",
          "iam:GetGroupPolicy",
          "iam:PutGroupPolicy",
          "iam:DeleteGroupPolicy",
          "iam:AttachGroupPolicy",
          "iam:DetachGroupPolicy",
          "iam:ListAttachedGroupPolicies",
          "iam:ListGroupPolicies",
          "iam:ListAccessKeys",
          "iam:GetAccessKeyLastUsed",
          "iam:GetInstanceProfile",
          "iam:ListInstanceProfiles",
          "iam:ListInstanceProfilesForRole"
        ],
        "Resource": "*"
      }
    ]
  },
  "Lake Formation Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "LakeFormationFullAccessWithAllManagement",
        "Effect": "Allow",
        "Action": [
          "lakeformation:GetDataLakeSettings",
          "lakeformation:PutDataLakeSettings",
          "lakeformation:RegisterResource",
          "lakeformation:DeregisterResource",
          "lakeformation:ListResources",
          "lakeformation:DescribeResource",
          "lakeformation:UpdateResource",
          "lakeformation:GrantPermissions",
          "lakeformation:RevokePermissions",
          "lakeformation:BatchGrantPermissions",
          "lakeformation:BatchRevokePermissions",
          "lakeformation:ListPermissions",
          "lakeformation:GetEffectivePermissionsForPath",
          "lakeformation:CreateLFTag",
          "lakeformation:DeleteLFTag",
          "lakeformation:GetLFTag",
          "lakeformation:ListLFTags",
          "lakeformation:UpdateLFTag",
          "lakeformation:AddLFTagsToResource",
          "lakeformation:RemoveLFTagsFromResource",
          "lakeformation:GetResourceLFTags",
          "lakeformation:SearchTablesByLFTags",
          "lakeformation:SearchDatabasesByLFTags",
          "lakeformation:CreateDataCellsFilter",
          "lakeformation:DeleteDataCellsFilter",
          "lakeformation:GetDataCellsFilter",
          "lakeformation:ListDataCellsFilter",
          "lakeformation:UpdateDataCellsFilter",
          "lakeformation:StartTransaction",
          "lakeformation:CommitTransaction",
          "lakeformation:CancelTransaction",
          "lakeformation:ExtendTransaction",
          "lakeformation:DescribeTransaction",
          "lakeformation:ListTransactions",
          "lakeformation:GetQueryState",
          "lakeformation:GetQueryStatistics",
          "lakeformation:GetWorkUnits",
          "lakeformation:GetWorkUnitResults",
          "lakeformation:StartQueryPlanning",
          "lakeformation:DescribeLakeFormationIdentityCenterConfiguration",
          "lakeformation:ListLFTagExpressions",
          "glue:GetCatalogs"
        ],
        "Resource": "*"
      }
    ]
  },
  "Lambda Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "LambdaFullAccessWithLayers",
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions",
          "lambda:CreateFunction",
          "lambda:UpdateFunctionCode",
          "lambda:UpdateFunctionConfiguration",
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:GetPolicy",
          "lambda:InvokeFunction",
          "lambda:AddPermission",
          "lambda:DeleteFunction",
          "lambda:ListLayers",
          "lambda:ListLayerVersions",
          "lambda:GetLayerVersion",
          "lambda:PublishLayerVersion",
          "lambda:DeleteLayerVersion",
          "lambda:AddLayerVersionPermission",
          "lambda:RemoveLayerVersionPermission",
          "lambda:GetLayerVersionPolicy"
        ],
        "Resource": "*"
      },
      {
        "Sid": "IAMBasicAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "iam:GetRole",
          "iam:PassRole"
        ],
        "Resource": "*"
      },
      {
        "Sid": "EC2NetworkInterfaceForLambdaVPC",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": "*"
      }
    ]
  },
  "MSK Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "MSKFullAccess",
        "Effect": "Allow",
        "Action": [
          "kafka:CreateCluster",
          "kafka:CreateClusterV2",
          "kafka:ListClusters",
          "kafka:ListClustersV2",
          "kafka:DescribeCluster",
          "kafka:DescribeClusterV2",
          "kafka:GetBootstrapBrokers",
          "kafka:ListNodes",
          "kafka:ListConfigurations",
          "kafka:DescribeConfiguration",
          "kafka:DescribeConfigurationRevision",
          "kafka:TagResource",
          "kafka:UntagResource",
          "kafka:ListTagsForResource",
          "kafka:DeleteCluster",
          "kafka:UpdateBrokerCount",
          "kafka:UpdateClusterConfiguration",
          "kafka:UpdateMonitoring"
        ],
        "Resource": "*"
      },
      {
        "Sid": "MSKServerlessAccess",
        "Effect": "Allow",
        "Action": [
          "kafka-cluster:Connect",
          "kafka-cluster:AlterCluster",
          "kafka-cluster:DescribeCluster",
          "kafka-cluster:CreateTopic",
          "kafka-cluster:DescribeTopic",
          "kafka-cluster:WriteData",
          "kafka-cluster:ReadData",
          "kafka-cluster:AlterTopic",
          "kafka-cluster:DeleteTopic"
        ],
        "Resource": "*"
      },
      {
        "Sid": "VPCNetworkingAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:CreateSecurityGroup",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeRouteTables"
        ],
        "Resource": "*"
      },
      {
        "Sid": "IAMPassRoleForMSK",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": "*",
        "Condition": {
          "StringLike": {
            "iam:PassedToService": "kafka.amazonaws.com"
          }
        }
      }
    ]
  },
  "RDS Policies": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "FullRDSAdminAccess",
        "Effect": "Allow",
        "Action": [
          "rds:CreateDBInstance",
          "rds:DeleteDBInstance",
          "rds:ModifyDBInstance",
          "rds:RebootDBInstance",
          "rds:StartDBInstance",
          "rds:StopDBInstance",
          "rds:DescribeDBInstances",
          "rds:CreateDBCluster",
          "rds:DeleteDBCluster",
          "rds:ModifyDBCluster",
          "rds:RebootDBCluster",
          "rds:StartDBCluster",
          "rds:StopDBCluster",
          "rds:DescribeDBClusters",
          "rds:CreateDBSnapshot",
          "rds:DeleteDBSnapshot",
          "rds:CopyDBSnapshot",
          "rds:DescribeDBSnapshots",
          "rds:RestoreDBInstanceFromDBSnapshot",
          "rds:CreateDBClusterSnapshot",
          "rds:DeleteDBClusterSnapshot",
          "rds:CopyDBClusterSnapshot",
          "rds:DescribeDBClusterSnapshots",
          "rds:RestoreDBClusterFromSnapshot",
          "rds:CreateDBParameterGroup",
          "rds:DeleteDBParameterGroup",
          "rds:ModifyDBParameterGroup",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:CreateOptionGroup",
          "rds:DeleteOptionGroup",
          "rds:ModifyOptionGroup",
          "rds:DescribeOptionGroups",
          "rds:DescribeOptionGroupOptions",
          "rds:CreateDBSubnetGroup",
          "rds:DeleteDBSubnetGroup",
          "rds:ModifyDBSubnetGroup",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEvents",
          "rds:DescribeEventSubscriptions",
          "rds:CreateEventSubscription",
          "rds:DeleteEventSubscription",
          "rds:AddTagsToResource",
          "rds:RemoveTagsFromResource",
          "rds:ListTagsForResource"
        ],
        "Resource": "*"
      }
    ]
  },
  "S3 Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "S3FullAccessWithValidActions",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy",
          "s3:PutBucketPolicy",
          "s3:DeleteBucketPolicy",
          "s3:GetBucketPolicyStatus",
          "s3:GetBucketAcl",
          "s3:PutBucketAcl",
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject",
          "s3:RestoreObject",
          "s3:GetObjectAcl",
          "s3:PutObjectAcl",
          "s3:GetObjectTagging",
          "s3:PutObjectTagging",
          "s3:DeleteObjectTagging",
          "s3:PutBucketVersioning",
          "s3:GetBucketVersioning",
          "s3:ListBucketVersions",
          "s3:GetObjectVersion",
          "s3:DeleteObjectVersion",
          "s3:GetObjectVersionAcl",
          "s3:PutObjectVersionAcl",
          "s3:GetObjectVersionTagging",
          "s3:PutObjectVersionTagging",
          "s3:DeleteObjectVersionTagging",
          "s3:PutLifecycleConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:PutEncryptionConfiguration",
          "s3:GetEncryptionConfiguration",
          "s3:AbortMultipartUpload",
          "s3:ListMultipartUploadParts",
          "s3:PutReplicationConfiguration",
          "s3:GetReplicationConfiguration",
          "s3:ReplicateObject",
          "s3:ReplicateDelete",
          "s3:ReplicateTags",
          "s3:PutBucketNotification",
          "s3:GetBucketNotification",
          "s3:PutIntelligentTieringConfiguration",
          "s3:GetIntelligentTieringConfiguration",
          "s3:PutInventoryConfiguration",
          "s3:GetInventoryConfiguration",
          "s3:PutMetricsConfiguration",
          "s3:GetMetricsConfiguration",
          "s3:PutAnalyticsConfiguration",
          "s3:GetAnalyticsConfiguration",
          "s3:PutBucketLogging",
          "s3:GetBucketLogging",
          "s3:PutBucketWebsite",
          "s3:GetBucketWebsite",
          "s3:PutBucketCORS",
          "s3:GetBucketCORS",
          "s3:PutBucketTagging",
          "s3:GetBucketTagging",
          "s3:PutBucketPublicAccessBlock",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetAccountPublicAccessBlock",
          "s3:PutAccountPublicAccessBlock",
          "s3:BypassGovernanceRetention",
          "s3:PutObjectRetention",
          "s3:GetObjectRetention",
          "s3:PutObjectLegalHold",
          "s3:GetObjectLegalHold"
        ],
        "Resource": "arn:aws:s3:::*"
      }
    ]
  },
  "Sagemaker AI Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "SageMakerFullPermissions",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateDomain",
          "sagemaker:DeleteDomain",
          "sagemaker:DescribeDomain",
          "sagemaker:ListDomains",
          "sagemaker:UpdateDomain",
          "sagemaker:CreateUserProfile",
          "sagemaker:DeleteUserProfile",
          "sagemaker:DescribeUserProfile",
          "sagemaker:ListUserProfiles",
          "sagemaker:UpdateUserProfile",
          "sagemaker:CreateApp",
          "sagemaker:DeleteApp",
          "sagemaker:DescribeApp",
          "sagemaker:ListApps",
          "sagemaker:CreateNotebookInstance",
          "sagemaker:DeleteNotebookInstance",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:ListNotebookInstances",
          "sagemaker:UpdateNotebookInstance",
          "sagemaker:StartNotebookInstance",
          "sagemaker:StopNotebookInstance",
          "sagemaker:CreateNotebookInstanceLifecycleConfig",
          "sagemaker:DeleteNotebookInstanceLifecycleConfig",
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:UpdateNotebookInstanceLifecycleConfig",
          "sagemaker:CreateTrainingJob",
          "sagemaker:DescribeTrainingJob",
          "sagemaker:ListTrainingJobs",
          "sagemaker:StopTrainingJob",
          "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
          "sagemaker:CreateHyperParameterTuningJob",
          "sagemaker:DescribeHyperParameterTuningJob",
          "sagemaker:ListHyperParameterTuningJobs",
          "sagemaker:StopHyperParameterTuningJob",
          "sagemaker:CreateModel",
          "sagemaker:DeleteModel",
          "sagemaker:DescribeModel",
          "sagemaker:ListModels",
          "sagemaker:CreateEndpoint",
          "sagemaker:DeleteEndpoint",
          "sagemaker:DescribeEndpoint",
          "sagemaker:ListEndpoints",
          "sagemaker:UpdateEndpoint",
          "sagemaker:InvokeEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:DeleteEndpointConfig",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:ListEndpointConfigs",
          "sagemaker:CreatePipeline",
          "sagemaker:DeletePipeline",
          "sagemaker:DescribePipeline",
          "sagemaker:ListPipelines",
          "sagemaker:UpdatePipeline",
          "sagemaker:StartPipelineExecution",
          "sagemaker:StopPipelineExecution",
          "sagemaker:DescribePipelineExecution",
          "sagemaker:ListPipelineExecutions",
          "sagemaker:ListPipelineExecutionSteps",
          "sagemaker:CreateProject",
          "sagemaker:DeleteProject",
          "sagemaker:DescribeProject",
          "sagemaker:ListProjects",
          "sagemaker:UpdateProject",
          "sagemaker:CreateModelPackage",
          "sagemaker:DeleteModelPackage",
          "sagemaker:DescribeModelPackage",
          "sagemaker:ListModelPackages",
          "sagemaker:UpdateModelPackage",
          "sagemaker:CreateModelPackageGroup",
          "sagemaker:DeleteModelPackageGroup",
          "sagemaker:DescribeModelPackageGroup",
          "sagemaker:ListModelPackageGroups",
          "sagemaker:CreateAlgorithm",
          "sagemaker:DeleteAlgorithm",
          "sagemaker:DescribeAlgorithm",
          "sagemaker:ListAlgorithms",
          "sagemaker:CreateCodeRepository",
          "sagemaker:DeleteCodeRepository",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:ListCodeRepositories",
          "sagemaker:UpdateCodeRepository",
          "sagemaker:AddTags",
          "sagemaker:DeleteTags",
          "sagemaker:ListTags"
        ],
        "Resource": "*"
      }
    ]
  },
  "ServiceCatalog Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "ServiceCatalogFullPermissions",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:CreatePortfolio",
          "servicecatalog:DeletePortfolio",
          "servicecatalog:DescribePortfolio",
          "servicecatalog:ListPortfolios",
          "servicecatalog:UpdatePortfolio",
          "servicecatalog:ListPortfolioAccess",
          "servicecatalog:AssociatePrincipalWithPortfolio",
          "servicecatalog:DisassociatePrincipalFromPortfolio",
          "servicecatalog:ListPrincipalsForPortfolio",
          "servicecatalog:CreateProduct",
          "servicecatalog:DeleteProduct",
          "servicecatalog:DescribeProduct",
          "servicecatalog:DescribeProductAsAdmin",
          "servicecatalog:SearchProducts",
          "servicecatalog:SearchProductsAsAdmin",
          "servicecatalog:UpdateProduct",
          "servicecatalog:AssociateProductWithPortfolio",
          "servicecatalog:DisassociateProductFromPortfolio",
          "servicecatalog:CreateProvisioningArtifact",
          "servicecatalog:DeleteProvisioningArtifact",
          "servicecatalog:DescribeProvisioningArtifact",
          "servicecatalog:ListProvisioningArtifacts",
          "servicecatalog:UpdateProvisioningArtifact",
          "servicecatalog:DescribeProvisioningParameters",
          "servicecatalog:ProvisionProduct",
          "servicecatalog:UpdateProvisionedProduct",
          "servicecatalog:TerminateProvisionedProduct",
          "servicecatalog:DescribeProvisionedProduct",
          "servicecatalog:SearchProvisionedProducts",
          "servicecatalog:ListProvisionedProductPlans",
          "servicecatalog:CreateProvisionedProductPlan",
          "servicecatalog:DeleteProvisionedProductPlan",
          "servicecatalog:DescribeProvisionedProductPlan",
          "servicecatalog:ExecuteProvisionedProductPlan",
          "servicecatalog:ListLaunchPaths",
          "servicecatalog:CreateConstraint",
          "servicecatalog:DeleteConstraint",
          "servicecatalog:DescribeConstraint",
          "servicecatalog:ListConstraintsForPortfolio",
          "servicecatalog:UpdateConstraint",
          "servicecatalog:CreateTagOption",
          "servicecatalog:DeleteTagOption",
          "servicecatalog:DescribeTagOption",
          "servicecatalog:ListTagOptions",
          "servicecatalog:UpdateTagOption",
          "servicecatalog:AssociateTagOptionWithResource",
          "servicecatalog:DisassociateTagOptionFromResource",
          "servicecatalog:ListResourcesForTagOption",
          "servicecatalog:CreateServiceAction",
          "servicecatalog:DeleteServiceAction",
          "servicecatalog:DescribeServiceAction",
          "servicecatalog:ListServiceActions",
          "servicecatalog:UpdateServiceAction",
          "servicecatalog:AssociateServiceActionWithProvisioningArtifact",
          "servicecatalog:DisassociateServiceActionFromProvisioningArtifact",
          "servicecatalog:ListServiceActionsForProvisioningArtifact",
          "servicecatalog:ExecuteProvisionedProductServiceAction",
          "servicecatalog:BatchAssociateServiceActionWithProvisioningArtifact",
          "servicecatalog:BatchDisassociateServiceActionFromProvisioningArtifact",
          "servicecatalog:DescribeRecord",
          "servicecatalog:ListRecordHistory",
          "servicecatalog:EnableAWSOrganizationsAccess",
          "servicecatalog:DisableAWSOrganizationsAccess",
          "servicecatalog:GetAWSOrganizationsAccessStatus",
          "servicecatalog:CreatePortfolioShare",
          "servicecatalog:DeletePortfolioShare",
          "servicecatalog:DescribePortfolioShares",
          "servicecatalog:AcceptPortfolioShare",
          "servicecatalog:RejectPortfolioShare",
          "servicecatalog:ListAcceptedPortfolioShares",
          "servicecatalog:UpdatePortfolioShare"
        ],
        "Resource": "*"
      }
    ]
  },
  "STS Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "STSFullPermissions",
        "Effect": "Allow",
        "Action": [
          "sts:AssumeRole",
          "sts:AssumeRoleWithWebIdentity",
          "sts:AssumeRoleWithSAML",
          "sts:GetFederationToken",
          "sts:GetSessionToken",
          "sts:GetAccessKeyInfo",
          "sts:GetCallerIdentity",
          "sts:DecodeAuthorizationMessage",
          "sts:TagSession",
          "sts:SetSourceIdentity"
        ],
        "Resource": "*"
      }
    ]
  },
  "VPC Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "AllowFullVPCAccessForDev",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpc",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:DeleteVpc",
          "ec2:CreateSubnet",
          "ec2:DescribeSubnets",
          "ec2:ModifySubnetAttribute",
          "ec2:DeleteSubnet",
          "ec2:CreateRouteTable",
          "ec2:DescribeRouteTables",
          "ec2:ReplaceRouteTableAssociation",
          "ec2:ReplaceRoute",
          "ec2:CreateRoute",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:AssociateRouteTable",
          "ec2:DisassociateRouteTable",
          "ec2:CreateInternetGateway",
          "ec2:DescribeInternetGateways",
          "ec2:AttachInternetGateway",
          "ec2:DetachInternetGateway",
          "ec2:DeleteInternetGateway",
          "ec2:CreateEgressOnlyInternetGateway",
          "ec2:DescribeEgressOnlyInternetGateways",
          "ec2:DeleteEgressOnlyInternetGateway",
          "ec2:CreateNatGateway",
          "ec2:DescribeNatGateways",
          "ec2:DeleteNatGateway",
          "ec2:CreateNetworkAcl",
          "ec2:DescribeNetworkAcls",
          "ec2:ReplaceNetworkAclAssociation",
          "ec2:ReplaceNetworkAclEntry",
          "ec2:DeleteNetworkAcl",
          "ec2:CreateNetworkAclEntry",
          "ec2:DeleteNetworkAclEntry",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeSecurityGroups",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:DeleteSecurityGroup",
          "ec2:CreateDhcpOptions",
          "ec2:DescribeDhcpOptions",
          "ec2:AssociateDhcpOptions",
          "ec2:DeleteDhcpOptions",
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeVpcEndpoints",
          "ec2:DeleteVpcEndpoints",
          "ec2:DescribeCarrierGateways",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeInstances",
          "ec2:DescribeVpnGateways",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": "*"
      }
    ]
  },
  "CloudWatch Debug Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "CloudWatchReadOnlyForDebugging",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:ListDashboards",
          "cloudwatch:ListEntitiesForMetric",
          "cloudwatch:ListMetrics",
          "cloudwatch:ListMetricStreams",
          "cloudwatch:ListServiceLevelObjectives",
          "cloudwatch:ListServices",
          "cloudwatch:ListTagsForResource",
          "cloudwatch:BatchGetServiceLevelIndicatorReport",
          "cloudwatch:BatchGetServiceLevelObjectiveBudgetReport",
          "cloudwatch:DescribeAlarmHistory",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:DescribeAnomalyDetectors",
          "cloudwatch:DescribeInsightRules",
          "cloudwatch:GenerateQuery",
          "cloudwatch:GenerateQueryResultsSummary",
          "cloudwatch:GetDashboard",
          "cloudwatch:GetInsightRuleReport",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:GetMetricStream",
          "cloudwatch:GetMetricWidgetImage",
          "cloudwatch:GetService",
          "cloudwatch:GetServiceData",
          "cloudwatch:GetServiceLevelObjective",
          "cloudwatch:GetTopologyDiscoveryStatus",
          "cloudwatch:GetTopologyMap",
          "cloudwatch:ListManagedInsightRules",
          "logs:DescribeAccountPolicies",
          "logs:DescribeConfigurationTemplates",
          "logs:DescribeDeliveries",
          "logs:DescribeDeliveryDestinations",
          "logs:DescribeDeliverySources",
          "logs:DescribeDestinations",
          "logs:DescribeExportTasks",
          "logs:DescribeFieldIndexes",
          "logs:DescribeIndexPolicies",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:DescribeMetricFilters",
          "logs:DescribeQueries",
          "logs:DescribeQueryDefinitions",
          "logs:DescribeResourcePolicies",
          "logs:DescribeSubscriptionFilters",
          "logs:ListAnomalies",
          "logs:ListEntitiesForLogGroup",
          "logs:ListIntegrations",
          "logs:ListLogAnomalyDetectors",
          "logs:ListLogDeliveries",
          "logs:ListLogGroups",
          "logs:ListLogGroupsForEntity",
          "logs:ListLogGroupsForQuery",
          "logs:ListTagsForResource",
          "logs:ListTagsLogGroup",
          "logs:FilterLogEvents",
          "logs:GetDataProtectionPolicy",
          "logs:GetDelivery",
          "logs:GetDeliveryDestination",
          "logs:GetDeliveryDestinationPolicy",
          "logs:GetDeliverySource",
          "logs:GetIntegration",
          "logs:GetLogAnomalyDetector",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:GetLogGroupFields",
          "logs:GetLogRecord",
          "logs:GetQueryResults",
          "logs:GetTransformer",
          "logs:StartLiveTail",
          "logs:StartQuery",
          "logs:StopLiveTail",
          "logs:StopQuery",
          "logs:TestMetricFilter",
          "logs:TestTransformer",
          "logs:Unmask"
        ],
        "Resource": "*"
      }
    ]
  },
  "CloudTrail Debug Policy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "CloudTrailReadOnlyForDebugging",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:ListChannels",
          "cloudtrail:ListDashboards",
          "cloudtrail:ListEventDataStores",
          "cloudtrail:ListImports",
          "cloudtrail:ListQueries",
          "cloudtrail:ListServiceLinkedChannels",
          "cloudtrail:ListTrails",
          "cloudtrail:DescribeQuery",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GenerateQueryResultsSummary",
          "cloudtrail:GetChannel",
          "cloudtrail:GetDashboard",
          "cloudtrail:GetEventConfiguration",
          "cloudtrail:GetEventDataStore",
          "cloudtrail:GetEventDataStoreData",
          "cloudtrail:GetEventSelectors",
          "cloudtrail:GetImport",
          "cloudtrail:GetInsightSelectors",
          "cloudtrail:GetQueryResults",
          "cloudtrail:GetResourcePolicy",
          "cloudtrail:GetServiceLinkedChannel",
          "cloudtrail:GetTrail",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:ListImportFailures",
          "cloudtrail:ListPublicKeys",
          "cloudtrail:ListTags",
          "cloudtrail:LookupEvents",
          "cloudtrail:SearchSampleQueries",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "kms:Decrypt",
          "kms:DescribeKey"
        ],
        "Resource": "*"
      }
    ]
  }
}